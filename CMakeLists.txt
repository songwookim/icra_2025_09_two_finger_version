cmake_minimum_required(VERSION 3.8)
project(hri_falcon_robot_bridge)

if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 17)
endif()

find_package(ament_cmake REQUIRED)
find_package(ament_cmake_python REQUIRED)
find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED)
find_package(geometry_msgs REQUIRED)
find_package(sensor_msgs REQUIRED)

# Set libnifalcon paths (local build)
set(LIBNIFALCON_ROOT_DIR "/home/songwoo/Desktop/work_dir/libnifalcon")
set(LIBNIFALCON_INCLUDE_DIRS "${LIBNIFALCON_ROOT_DIR}/include")
set(LIBNIFALCON_LIBRARY_DIRS "${LIBNIFALCON_ROOT_DIR}/build/lib")
set(LIBNIFALCON_LIBRARIES "nifalcon")

# Check if libnifalcon exists
if(EXISTS "${LIBNIFALCON_INCLUDE_DIRS}/falcon/core/FalconDevice.h")
  set(LIBNIFALCON_FOUND TRUE)
  message(STATUS "Local libnifalcon found at ${LIBNIFALCON_ROOT_DIR}")
else()
  set(LIBNIFALCON_FOUND FALSE)
  message(STATUS "Local libnifalcon not found - building with simulation mode")
endif()

# --- C++ Falcon node ---
add_executable(falcon_node src/falcon_node.cpp)
ament_target_dependencies(falcon_node rclcpp std_msgs geometry_msgs)

# Always build falcon_node with debug symbols and no optimization for reliable debugging
if(NOT MSVC)
  target_compile_options(falcon_node PRIVATE -g -O0 -fno-omit-frame-pointer)
endif()

if(LIBNIFALCON_FOUND)
  message(STATUS "libnifalcon found - building with real Falcon support")
  target_include_directories(falcon_node PRIVATE ${LIBNIFALCON_INCLUDE_DIRS})
  target_link_directories(falcon_node PRIVATE ${LIBNIFALCON_LIBRARY_DIRS})
  target_link_libraries(falcon_node ${LIBNIFALCON_LIBRARIES})
  target_compile_definitions(falcon_node PRIVATE HAVE_LIBNIFALCON)
  # Ensure the runtime loader can find libnifalcon without manually exporting LD_LIBRARY_PATH
  set_target_properties(falcon_node PROPERTIES
    BUILD_RPATH "${LIBNIFALCON_LIBRARY_DIRS}"
    INSTALL_RPATH "${LIBNIFALCON_LIBRARY_DIRS}"
  )
else()
  message(STATUS "libnifalcon not found - building with simulation mode")
endif()

install(TARGETS falcon_node DESTINATION lib/${PROJECT_NAME})

# --- Python nodes ---

ament_python_install_package(${PROJECT_NAME})

install(PROGRAMS
  hri_falcon_robot_bridge/force_sensor_node.py
  hri_falcon_robot_bridge/haptic_robot_controller.py
  hri_falcon_robot_bridge/continuous_force_test_node.py
  hri_falcon_robot_bridge/hand_tracker_node.py
  hri_falcon_robot_bridge/robot_controller_node.py
  hri_falcon_robot_bridge/deformity_tracker_node.py
  hri_falcon_robot_bridge/data_logger_node.py
  hri_falcon_robot_bridge/emg_node.py
  DESTINATION lib/${PROJECT_NAME}
)

# Optional: install a .py-less alias so users can run `ros2 run ... hand_tracker_node`
install(PROGRAMS
  hri_falcon_robot_bridge/hand_tracker_node.py
  DESTINATION lib/${PROJECT_NAME}
  RENAME hand_tracker_node
)

# Optional: alias for robot_controller_node without .py
install(PROGRAMS
  hri_falcon_robot_bridge/robot_controller_node.py
  DESTINATION lib/${PROJECT_NAME}
  RENAME robot_controller_node
)

# Optional: alias for deformity_tracker_node without .py
install(PROGRAMS
  hri_falcon_robot_bridge/deformity_tracker_node.py
  DESTINATION lib/${PROJECT_NAME}
  RENAME deformity_tracker_node
)

# Optional: alias for data_logger_node without .py
install(PROGRAMS
  hri_falcon_robot_bridge/data_logger_node.py
  DESTINATION lib/${PROJECT_NAME}
  RENAME data_logger_node
)

# Optional: alias for emg_node without .py
install(PROGRAMS
  hri_falcon_robot_bridge/emg_node.py
  DESTINATION lib/${PROJECT_NAME}
  RENAME emg_node
)

# --- Launch ---
install(DIRECTORY launch DESTINATION share/${PROJECT_NAME}/)

# --- Resource files ---
install(DIRECTORY resource/ DESTINATION share/${PROJECT_NAME}/)

ament_package()
